<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/composeApp/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/composeApp/build.gradle.kts" />
              <option name="originalContent" value="import org.jetbrains.compose.desktop.application.dsl.TargetFormat&#10;import org.jetbrains.kotlin.gradle.dsl.JvmTarget&#10;&#10;plugins {&#10;    alias(libs.plugins.kotlinMultiplatform)&#10;    alias(libs.plugins.androidApplication)&#10;    alias(libs.plugins.composeMultiplatform)&#10;    alias(libs.plugins.composeCompiler)&#10;}&#10;&#10;kotlin {&#10;    androidTarget {&#10;        compilerOptions {&#10;            jvmTarget.set(JvmTarget.JVM_11)&#10;        }&#10;    }&#10;&#10;    listOf(&#10;        iosArm64(),&#10;        iosSimulatorArm64()&#10;    ).forEach { iosTarget -&gt;&#10;        iosTarget.binaries.framework {&#10;            baseName = &quot;ComposeApp&quot;&#10;            isStatic = true&#10;        }&#10;    }&#10;&#10;    sourceSets {&#10;        androidMain.dependencies {&#10;            implementation(compose.preview)&#10;            implementation(libs.androidx.activity.compose)&#10;            // WebView-based map needs no native Map SDK dependency&#10;        }&#10;        commonMain.dependencies {&#10;            implementation(compose.runtime)&#10;            implementation(compose.foundation)&#10;            implementation(compose.material3)&#10;            implementation(compose.materialIconsExtended)&#10;            implementation(compose.ui)&#10;            implementation(compose.components.resources)&#10;            implementation(compose.components.uiToolingPreview)&#10;            implementation(libs.androidx.lifecycle.viewmodelCompose)&#10;            implementation(libs.androidx.lifecycle.runtimeCompose)&#10;        }&#10;        commonTest.dependencies {&#10;            implementation(libs.kotlin.test)&#10;        }&#10;    }&#10;}&#10;&#10;android {&#10;    namespace = &quot;compose.project.click.click&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;compose.project.click.click&quot;&#10;        minSdk = libs.versions.android.minSdk.get().toInt()&#10;        targetSdk = libs.versions.android.targetSdk.get().toInt()&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;        // MapLibre doesn't require an API key&#10;    }&#10;    packaging {&#10;        resources {&#10;            excludes += &quot;/META-INF/{AL2.0,LGPL2.1}&quot;&#10;        }&#10;    }&#10;    buildTypes {&#10;        getByName(&quot;release&quot;) {&#10;            isMinifyEnabled = false&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;}&#10;&#10;dependencies {&#10;    debugImplementation(compose.uiTooling)&#10;}&#10;" />
              <option name="updatedContent" value="import org.jetbrains.compose.desktop.application.dsl.TargetFormat&#10;import org.jetbrains.kotlin.gradle.dsl.JvmTarget&#10;&#10;plugins {&#10;    alias(libs.plugins.kotlinMultiplatform)&#10;    alias(libs.plugins.androidApplication)&#10;    alias(libs.plugins.composeMultiplatform)&#10;    alias(libs.plugins.composeCompiler)&#10;}&#10;&#10;kotlin {&#10;    androidTarget {&#10;        compilerOptions {&#10;            jvmTarget.set(JvmTarget.JVM_11)&#10;        }&#10;    }&#10;&#10;    listOf(&#10;        iosArm64(),&#10;        iosSimulatorArm64()&#10;    ).forEach { iosTarget -&gt;&#10;        iosTarget.binaries.framework {&#10;            baseName = &quot;ComposeApp&quot;&#10;            isStatic = true&#10;        }&#10;    }&#10;&#10;    sourceSets {&#10;        androidMain.dependencies {&#10;            implementation(compose.preview)&#10;            implementation(libs.androidx.activity.compose)&#10;            // WebView-based map needs no native Map SDK dependency&#10;        }&#10;        iosMain.dependencies {&#10;            // Cupertino components for iOS-specific UI (JitPack)&#10;            implementation(&quot;com.github.alexzhirkevich:compose-cupertino:0.4.2&quot;)&#10;        }&#10;        commonMain.dependencies {&#10;            implementation(compose.runtime)&#10;            implementation(compose.foundation)&#10;            implementation(compose.material3)&#10;            implementation(compose.materialIconsExtended)&#10;            implementation(compose.ui)&#10;            implementation(compose.components.resources)&#10;            implementation(compose.components.uiToolingPreview)&#10;            implementation(libs.androidx.lifecycle.viewmodelCompose)&#10;            implementation(libs.androidx.lifecycle.runtimeCompose)&#10;        }&#10;        commonTest.dependencies {&#10;            implementation(libs.kotlin.test)&#10;        }&#10;    }&#10;}&#10;&#10;android {&#10;    namespace = &quot;compose.project.click.click&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;compose.project.click.click&quot;&#10;        minSdk = libs.versions.android.minSdk.get().toInt()&#10;        targetSdk = libs.versions.android.targetSdk.get().toInt()&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;        // MapLibre doesn't require an API key&#10;    }&#10;    packaging {&#10;        resources {&#10;            excludes += &quot;/META-INF/{AL2.0,LGPL2.1}&quot;&#10;        }&#10;    }&#10;    buildTypes {&#10;        getByName(&quot;release&quot;) {&#10;            isMinifyEnabled = false&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;}&#10;&#10;dependencies {&#10;    debugImplementation(compose.uiTooling)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/composeApp/src/androidMain/kotlin/compose/project/click/click/ui/components/AdaptiveButton.android.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/composeApp/src/androidMain/kotlin/compose/project/click/click/ui/components/AdaptiveButton.android.kt" />
              <option name="updatedContent" value="package compose.project.click.click.ui.components&#10;&#10;import androidx.compose.foundation.layout.RowScope&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.FilledTonalButton&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import compose.project.click.click.ui.theme.PrimaryBlue&#10;import compose.project.click.click.ui.theme.SoftBlue&#10;&#10;@Composable&#10;actual fun AdaptiveButton(&#10;    onClick: () -&gt; Unit,&#10;    modifier: Modifier,&#10;    enabled: Boolean,&#10;    content: @Composable RowScope.() -&gt; Unit&#10;) {&#10;    FilledTonalButton(&#10;        onClick = onClick,&#10;        modifier = modifier,&#10;        enabled = enabled,&#10;        colors = ButtonDefaults.filledTonalButtonColors(&#10;            containerColor = SoftBlue,&#10;            contentColor = PrimaryBlue&#10;        ),&#10;        shape = RoundedCornerShape(20.dp),&#10;        content = content&#10;    )&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/composeApp/src/commonMain/kotlin/compose/project/click/click/App.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/composeApp/src/commonMain/kotlin/compose/project/click/click/App.kt" />
              <option name="originalContent" value="package compose.project.click.click&#10;&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.unit.dp&#10;import compose.project.click.click.navigation.NavigationItem&#10;import compose.project.click.click.navigation.bottomNavItems&#10;import compose.project.click.click.ui.screens.*&#10;import compose.project.click.click.ui.theme.*&#10;import org.jetbrains.compose.ui.tooling.preview.Preview&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;@Preview&#10;fun App() {&#10;    MaterialTheme(&#10;        colorScheme = lightColorScheme(&#10;            primary = PrimaryBlue,&#10;            secondary = AccentBlue,&#10;            background = BackgroundLight,&#10;            surface = SurfaceLight,&#10;            onSurface = OnSurfaceLight,&#10;            primaryContainer = SoftBlue,&#10;            onPrimaryContainer = DeepBlue&#10;        )&#10;    ) {&#10;        var currentRoute by remember { mutableStateOf(&quot;home&quot;) }&#10;&#10;        Scaffold(&#10;            bottomBar = {&#10;                NavigationBar(&#10;                    containerColor = SurfaceLight.copy(alpha = 0.95f),&#10;                    tonalElevation = 8.dp&#10;                ) {&#10;                    bottomNavItems.forEach { item -&gt;&#10;                        NavigationBarItem(&#10;                            icon = { Icon(item.icon, contentDescription = item.title) },&#10;                            label = { Text(item.title) },&#10;                            selected = currentRoute == item.route,&#10;                            onClick = { currentRoute = item.route },&#10;                            colors = NavigationBarItemDefaults.colors(&#10;                                selectedIconColor = PrimaryBlue,&#10;                                selectedTextColor = PrimaryBlue,&#10;                                indicatorColor = SoftBlue,&#10;                                unselectedIconColor = TextSecondary,&#10;                                unselectedTextColor = TextSecondary&#10;                            )&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        ) { paddingValues -&gt;&#10;            Surface(&#10;                modifier = Modifier.padding(paddingValues),&#10;                color = BackgroundLight&#10;            ) {&#10;                when (currentRoute) {&#10;                    NavigationItem.Home.route -&gt; HomeScreen()&#10;                    NavigationItem.AddClick.route -&gt; AddClickScreen()&#10;                    NavigationItem.Connections.route -&gt; ConnectionsScreen()&#10;                    NavigationItem.Map.route -&gt; MapScreen()&#10;                    NavigationItem.Clicktivities.route -&gt; ClicktivitiesScreen()&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package compose.project.click.click&#10;&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.unit.dp&#10;import compose.project.click.click.navigation.NavigationItem&#10;import compose.project.click.click.navigation.bottomNavItems&#10;import compose.project.click.click.ui.components.PlatformBottomBar&#10;import compose.project.click.click.ui.screens.*&#10;import compose.project.click.click.ui.theme.*&#10;import org.jetbrains.compose.ui.tooling.preview.Preview&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;@Preview&#10;fun App() {&#10;    MaterialTheme(&#10;        colorScheme = lightColorScheme(&#10;            primary = PrimaryBlue,&#10;            secondary = AccentBlue,&#10;            background = BackgroundLight,&#10;            surface = SurfaceLight,&#10;            onSurface = OnSurfaceLight,&#10;            primaryContainer = SoftBlue,&#10;            onPrimaryContainer = DeepBlue&#10;        )&#10;    ) {&#10;        var currentRoute by remember { mutableStateOf(&quot;home&quot;) }&#10;&#10;        Scaffold(&#10;            bottomBar = {&#10;                PlatformBottomBar(&#10;                    items = bottomNavItems,&#10;                    currentRoute = currentRoute,&#10;                    onItemSelected = { item -&gt; currentRoute = item.route }&#10;                )&#10;            }&#10;        ) { paddingValues -&gt;&#10;            Surface(&#10;                modifier = Modifier.padding(paddingValues),&#10;                color = BackgroundLight&#10;            ) {&#10;                when (currentRoute) {&#10;                    NavigationItem.Home.route -&gt; HomeScreen()&#10;                    NavigationItem.AddClick.route -&gt; AddClickScreen()&#10;                    NavigationItem.Connections.route -&gt; ConnectionsScreen()&#10;                    NavigationItem.Map.route -&gt; MapScreen()&#10;                    NavigationItem.Clicktivities.route -&gt; ClicktivitiesScreen()&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/composeApp/src/commonMain/kotlin/compose/project/click/click/ui/components/AdaptiveCard.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/composeApp/src/commonMain/kotlin/compose/project/click/click/ui/components/AdaptiveCard.kt" />
              <option name="originalContent" value="package compose.project.click.click.ui.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.unit.dp&#10;import compose.project.click.click.getPlatform&#10;import compose.project.click.click.ui.theme.*&#10;&#10;@Composable&#10;fun AdaptiveCard(&#10;    modifier: Modifier = Modifier,&#10;    onClick: (() -&gt; Unit)? = null,&#10;    content: @Composable ColumnScope.() -&gt; Unit&#10;) {&#10;    val isIOS = getPlatform().name.contains(&quot;iOS&quot;, ignoreCase = true)&#10;&#10;    if (isIOS) {&#10;        // iOS: Liquid Glass Style&#10;        Surface(&#10;            modifier = modifier,&#10;            shape = RoundedCornerShape(20.dp),&#10;            color = Color.White.copy(alpha = 0.7f),&#10;            shadowElevation = 0.dp,&#10;            onClick = onClick ?: {}&#10;        ) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .background(Color.White.copy(alpha = 0.3f))&#10;                    .border(&#10;                        width = 0.5.dp,&#10;                        color = Color.White.copy(alpha = 0.8f),&#10;                        shape = RoundedCornerShape(20.dp)&#10;                    )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp),&#10;                    content = content&#10;                )&#10;            }&#10;        }&#10;    } else {&#10;        // Android: Material You&#10;        ElevatedCard(&#10;            modifier = modifier,&#10;            shape = RoundedCornerShape(16.dp),&#10;            colors = CardDefaults.elevatedCardColors(&#10;                containerColor = SurfaceLight&#10;            ),&#10;            elevation = CardDefaults.elevatedCardElevation(&#10;                defaultElevation = 2.dp&#10;            ),&#10;            onClick = onClick ?: {}&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(16.dp),&#10;                content = content&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun AdaptiveSurface(&#10;    modifier: Modifier = Modifier,&#10;    content: @Composable ColumnScope.() -&gt; Unit&#10;) {&#10;    val isIOS = getPlatform().name.contains(&quot;iOS&quot;, ignoreCase = true)&#10;&#10;    if (isIOS) {&#10;        // iOS: Frosted glass header&#10;        Surface(&#10;            modifier = modifier,&#10;            color = Color.White.copy(alpha = 0.8f),&#10;            shadowElevation = 0.dp&#10;        ) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .background(Color.White.copy(alpha = 0.4f))&#10;                    .border(&#10;                        width = 0.5.dp,&#10;                        color = Color.White.copy(alpha = 0.3f),&#10;                        shape = RoundedCornerShape(bottomStart = 24.dp, bottomEnd = 24.dp)&#10;                    )&#10;            ) {&#10;                Column(content = content)&#10;            }&#10;        }&#10;    } else {&#10;        // Android: Material surface&#10;        Surface(&#10;            modifier = modifier,&#10;            color = GlassLight.copy(alpha = 0.95f),&#10;            shadowElevation = 2.dp,&#10;            tonalElevation = 1.dp&#10;        ) {&#10;            Column(content = content)&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun AdaptiveBackground(&#10;    modifier: Modifier = Modifier,&#10;    content: @Composable BoxScope.() -&gt; Unit&#10;) {&#10;    val isIOS = getPlatform().name.contains(&quot;iOS&quot;, ignoreCase = true)&#10;&#10;    Box(&#10;        modifier = modifier.background(&#10;            if (isIOS) Color(0xFFF8F9FA) else BackgroundLight&#10;        ),&#10;        content = content&#10;    )&#10;}&#10;&#10;@Composable&#10;fun AdaptiveButton(&#10;    onClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier,&#10;    enabled: Boolean = true,&#10;    content: @Composable RowScope.() -&gt; Unit&#10;) {&#10;    val isIOS = getPlatform().name.contains(&quot;iOS&quot;, ignoreCase = true)&#10;&#10;    if (isIOS) {&#10;        // iOS: Filled button with rounded corners&#10;        Button(&#10;            onClick = onClick,&#10;            modifier = modifier,&#10;            enabled = enabled,&#10;            colors = ButtonDefaults.buttonColors(&#10;                containerColor = PrimaryBlue,&#10;                contentColor = Color.White&#10;            ),&#10;            shape = RoundedCornerShape(12.dp),&#10;            elevation = ButtonDefaults.buttonElevation(&#10;                defaultElevation = 0.dp,&#10;                pressedElevation = 0.dp&#10;            ),&#10;            content = content&#10;        )&#10;    } else {&#10;        // Android: Material You button&#10;        FilledTonalButton(&#10;            onClick = onClick,&#10;            modifier = modifier,&#10;            enabled = enabled,&#10;            colors = ButtonDefaults.filledTonalButtonColors(&#10;                containerColor = SoftBlue,&#10;                contentColor = PrimaryBlue&#10;            ),&#10;            shape = RoundedCornerShape(20.dp),&#10;            content = content&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun getAdaptiveCornerRadius(): androidx.compose.ui.unit.Dp {&#10;    val isIOS = getPlatform().name.contains(&quot;iOS&quot;, ignoreCase = true)&#10;    return if (isIOS) 20.dp else 16.dp&#10;}&#10;&#10;@Composable&#10;fun getAdaptivePadding(): androidx.compose.ui.unit.Dp {&#10;    val isIOS = getPlatform().name.contains(&quot;iOS&quot;, ignoreCase = true)&#10;    return if (isIOS) 16.dp else 20.dp&#10;}&#10;" />
              <option name="updatedContent" value="package compose.project.click.click.ui.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.unit.dp&#10;import compose.project.click.click.getPlatform&#10;import compose.project.click.click.ui.theme.*&#10;&#10;@Composable&#10;fun AdaptiveCard(&#10;    modifier: Modifier = Modifier,&#10;    onClick: (() -&gt; Unit)? = null,&#10;    content: @Composable ColumnScope.() -&gt; Unit&#10;) {&#10;    val isIOS = getPlatform().name.contains(&quot;iOS&quot;, ignoreCase = true)&#10;&#10;    if (isIOS) {&#10;        // iOS: Liquid Glass Style&#10;        Surface(&#10;            modifier = modifier,&#10;            shape = RoundedCornerShape(20.dp),&#10;            color = Color.White.copy(alpha = 0.7f),&#10;            shadowElevation = 0.dp,&#10;            onClick = onClick ?: {}&#10;        ) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .background(Color.White.copy(alpha = 0.3f))&#10;                    .border(&#10;                        width = 0.5.dp,&#10;                        color = Color.White.copy(alpha = 0.8f),&#10;                        shape = RoundedCornerShape(20.dp)&#10;                    )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp),&#10;                    content = content&#10;                )&#10;            }&#10;        }&#10;    } else {&#10;        // Android: Material You&#10;        ElevatedCard(&#10;            modifier = modifier,&#10;            shape = RoundedCornerShape(16.dp),&#10;            colors = CardDefaults.elevatedCardColors(&#10;                containerColor = SurfaceLight&#10;            ),&#10;            elevation = CardDefaults.elevatedCardElevation(&#10;                defaultElevation = 2.dp&#10;            ),&#10;            onClick = onClick ?: {}&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(16.dp),&#10;                content = content&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun AdaptiveSurface(&#10;    modifier: Modifier = Modifier,&#10;    content: @Composable ColumnScope.() -&gt; Unit&#10;) {&#10;    val isIOS = getPlatform().name.contains(&quot;iOS&quot;, ignoreCase = true)&#10;&#10;    if (isIOS) {&#10;        // iOS: Frosted glass header&#10;        Surface(&#10;            modifier = modifier,&#10;            color = Color.White.copy(alpha = 0.8f),&#10;            shadowElevation = 0.dp&#10;        ) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .background(Color.White.copy(alpha = 0.4f))&#10;                    .border(&#10;                        width = 0.5.dp,&#10;                        color = Color.White.copy(alpha = 0.3f),&#10;                        shape = RoundedCornerShape(bottomStart = 24.dp, bottomEnd = 24.dp)&#10;                    )&#10;            ) {&#10;                Column(content = content)&#10;            }&#10;        }&#10;    } else {&#10;        // Android: Material surface&#10;        Surface(&#10;            modifier = modifier,&#10;            color = GlassLight.copy(alpha = 0.95f),&#10;            shadowElevation = 2.dp,&#10;            tonalElevation = 1.dp&#10;        ) {&#10;            Column(content = content)&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun AdaptiveBackground(&#10;    modifier: Modifier = Modifier,&#10;    content: @Composable BoxScope.() -&gt; Unit&#10;) {&#10;    val isIOS = getPlatform().name.contains(&quot;iOS&quot;, ignoreCase = true)&#10;&#10;    Box(&#10;        modifier = modifier.background(&#10;            if (isIOS) Color(0xFFF8F9FA) else BackgroundLight&#10;        ),&#10;        content = content&#10;    )&#10;}&#10;&#10;@Composable&#10;expect fun AdaptiveButton(&#10;    onClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier,&#10;    enabled: Boolean = true,&#10;    content: @Composable RowScope.() -&gt; Unit&#10;)&#10;&#10;@Composable&#10;fun getAdaptiveCornerRadius(): androidx.compose.ui.unit.Dp {&#10;    val isIOS = getPlatform().name.contains(&quot;iOS&quot;, ignoreCase = true)&#10;    return if (isIOS) 20.dp else 16.dp&#10;}&#10;&#10;@Composable&#10;fun getAdaptivePadding(): androidx.compose.ui.unit.Dp {&#10;    val isIOS = getPlatform().name.contains(&quot;iOS&quot;, ignoreCase = true)&#10;    return if (isIOS) 16.dp else 20.dp&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/composeApp/src/iosMain/kotlin/compose/project/click/click/ui/components/AdaptiveButton.ios.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/composeApp/src/iosMain/kotlin/compose/project/click/click/ui/components/AdaptiveButton.ios.kt" />
              <option name="updatedContent" value="package compose.project.click.click.ui.components&#10;&#10;import androidx.compose.foundation.layout.RowScope&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import io.github.alexzhirkevich.cupertino.CupertinoButton&#10;&#10;@Composable&#10;actual fun AdaptiveButton(&#10;    onClick: () -&gt; Unit,&#10;    modifier: Modifier,&#10;    enabled: Boolean,&#10;    content: @Composable RowScope.() -&gt; Unit&#10;) {&#10;    CupertinoButton(&#10;        onClick = onClick,&#10;        enabled = enabled,&#10;        modifier = modifier,&#10;        content = content&#10;    )&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/composeApp/src/iosMain/kotlin/compose/project/click/click/ui/components/BottomBar.ios.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/composeApp/src/iosMain/kotlin/compose/project/click/click/ui/components/BottomBar.ios.kt" />
              <option name="originalContent" value="package compose.project.click.click.ui.components&#10;&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.NavigationBar&#10;import androidx.compose.material3.NavigationBarItem&#10;import androidx.compose.material3.NavigationBarItemDefaults&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.unit.dp&#10;import compose.project.click.click.navigation.NavigationItem&#10;import compose.project.click.click.ui.theme.*&#10;&#10;@Composable&#10;actual fun PlatformBottomBar(&#10;    items: List&lt;NavigationItem&gt;,&#10;    currentRoute: String,&#10;    onItemSelected: (NavigationItem) -&gt; Unit&#10;) {&#10;    NavigationBar(&#10;        containerColor = SurfaceLight.copy(alpha = 0.95f),&#10;        tonalElevation = 8.dp&#10;    ) {&#10;        items.forEach { item -&gt;&#10;            NavigationBarItem(&#10;                icon = { Icon(item.icon, contentDescription = item.title) },&#10;                label = { Text(item.title) },&#10;                selected = currentRoute == item.route,&#10;                onClick = { onItemSelected(item) },&#10;                colors = NavigationBarItemDefaults.colors(&#10;                    selectedIconColor = PrimaryBlue,&#10;                    selectedTextColor = PrimaryBlue,&#10;                    indicatorColor = SoftBlue,&#10;                    unselectedIconColor = TextSecondary,&#10;                    unselectedTextColor = TextSecondary&#10;                )&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package compose.project.click.click.ui.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import compose.project.click.click.navigation.NavigationItem&#10;import compose.project.click.click.ui.theme.PrimaryBlue&#10;import compose.project.click.click.ui.theme.SoftBlue&#10;import compose.project.click.click.ui.theme.TextSecondary&#10;&#10;@Composable&#10;actual fun PlatformBottomBar(&#10;    items: List&lt;NavigationItem&gt;,&#10;    currentRoute: String,&#10;    onItemSelected: (NavigationItem) -&gt; Unit&#10;) {&#10;    val selectedIndex = items.indexOfFirst { it.route == currentRoute }.let { if (it &gt;= 0) it else 0 }&#10;&#10;    Surface(&#10;        tonalElevation = 0.dp,&#10;        shadowElevation = 0.dp,&#10;        color = Color.White.copy(alpha = 0.95f)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 8.dp, vertical = 6.dp),&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            items.forEachIndexed { index, item -&gt;&#10;                val selected = index == selectedIndex&#10;                Column(&#10;                    modifier = Modifier&#10;                        .weight(1f)&#10;                        .clip(RoundedCornerShape(12.dp))&#10;                        .clickable { onItemSelected(item) }&#10;                        .padding(vertical = 6.dp),&#10;                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                    verticalArrangement = Arrangement.spacedBy(2.dp)&#10;                ) {&#10;                    Icon(&#10;                        item.icon,&#10;                        contentDescription = item.title,&#10;                        tint = if (selected) PrimaryBlue else TextSecondary&#10;                    )&#10;                    Text(&#10;                        item.title,&#10;                        color = if (selected) PrimaryBlue else TextSecondary,&#10;                        fontSize = 11.sp&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/settings.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/settings.gradle.kts" />
              <option name="originalContent" value="rootProject.name = &quot;click&quot;&#10;enableFeaturePreview(&quot;TYPESAFE_PROJECT_ACCESSORS&quot;)&#10;&#10;pluginManagement {&#10;    repositories {&#10;        google {&#10;            mavenContent {&#10;                includeGroupAndSubgroups(&quot;androidx&quot;)&#10;                includeGroupAndSubgroups(&quot;com.android&quot;)&#10;                includeGroupAndSubgroups(&quot;com.google&quot;)&#10;            }&#10;        }&#10;        mavenCentral()&#10;        gradlePluginPortal()&#10;    }&#10;}&#10;&#10;dependencyResolutionManagement {&#10;    repositories {&#10;        google {&#10;            mavenContent {&#10;                includeGroupAndSubgroups(&quot;androidx&quot;)&#10;                includeGroupAndSubgroups(&quot;com.android&quot;)&#10;                includeGroupAndSubgroups(&quot;com.google&quot;)&#10;            }&#10;        }&#10;        mavenCentral()&#10;    }&#10;}&#10;&#10;include(&quot;:composeApp&quot;)&#10;include(&quot;:shared&quot;)&#10;include(&quot;:androidApp&quot;)&#10;include(&quot;:desktopApp&quot;)" />
              <option name="updatedContent" value="rootProject.name = &quot;click&quot;&#10;enableFeaturePreview(&quot;TYPESAFE_PROJECT_ACCESSORS&quot;)&#10;&#10;pluginManagement {&#10;    repositories {&#10;        google {&#10;            mavenContent {&#10;                includeGroupAndSubgroups(&quot;androidx&quot;)&#10;                includeGroupAndSubgroups(&quot;com.android&quot;)&#10;                includeGroupAndSubgroups(&quot;com.google&quot;)&#10;            }&#10;        }&#10;        mavenCentral()&#10;        gradlePluginPortal()&#10;        maven(&quot;https://jitpack.io&quot;)&#10;    }&#10;}&#10;&#10;dependencyResolutionManagement {&#10;    repositories {&#10;        google {&#10;            mavenContent {&#10;                includeGroupAndSubgroups(&quot;androidx&quot;)&#10;                includeGroupAndSubgroups(&quot;com.android&quot;)&#10;                includeGroupAndSubgroups(&quot;com.google&quot;)&#10;            }&#10;        }&#10;        mavenCentral()&#10;        maven(&quot;https://jitpack.io&quot;)&#10;    }&#10;}&#10;&#10;include(&quot;:composeApp&quot;)&#10;include(&quot;:shared&quot;)&#10;include(&quot;:androidApp&quot;)&#10;include(&quot;:desktopApp&quot;)" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>